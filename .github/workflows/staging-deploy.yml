name: Deploy to Staging

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

env:
  STAGING_PROJECT_REF: yfkbevovqyjwanrubddq
  PRODUCTION_PROJECT_REF: zfroutbzdkhivnpiezho

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run linting
      run: pnpm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Run build test
      run: pnpm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  migration-check:
    runs-on: ubuntu-latest
    name: Check Migrations
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
    
    - name: Check migration status
      run: |
        echo "Checking migration consistency..."
        
        # Check for dangerous operations
        if grep -r "DROP TABLE\|DROP COLUMN\|DROP INDEX" supabase/migrations/; then
          echo "‚ùå Dangerous operations found in migrations!"
          exit 1
        fi
        
        echo "‚úÖ Migration safety checks passed"

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [test, migration-check]
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Link to staging project
      run: |
        echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | supabase auth login --token
        supabase link --project-ref ${{ env.STAGING_PROJECT_REF }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    
    - name: Apply migrations to staging
      run: |
        echo "üóÑÔ∏è Applying migrations to staging..."
        supabase db push --linked
    
    - name: Deploy to Vercel staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--env NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }} --env NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }} --env ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} --env OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} --env NODE_ENV=staging'
        alias-domains: |
          staging-mano.vercel.app
    
    - name: Run staging health check
      run: |
        echo "üîç Waiting for deployment..."
        sleep 30
        
        # Health check
        STAGING_URL="${{ steps.deploy.outputs.preview-url }}"
        if curl -f "$STAGING_URL/api/health"; then
          echo "‚úÖ Staging deployment healthy"
        else
          echo "‚ùå Staging deployment failed health check"
          exit 1
        fi
    
    - name: Comment PR with staging link
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Staging Deployment Ready**
            
            **Staging URL**: ${{ steps.deploy.outputs.preview-url }}
            **Database**: \`${{ env.STAGING_PROJECT_REF }}\`
            
            ‚úÖ All tests passed
            ‚úÖ Migrations applied
            ‚úÖ Health check passed
            
            Ready for review and testing!`
          })
