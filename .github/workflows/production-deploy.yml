name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type DEPLOY to confirm production deployment'
        required: true
        type: string

env:
  PRODUCTION_PROJECT_REF: zfroutbzdkhivnpiezho

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    name: Pre-deployment Checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate confirmation (if manual)
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [[ "${{ github.event.inputs.confirm_production }}" != "DEPLOY" ]]; then
          echo "‚ùå Production deployment requires 'DEPLOY' confirmation"
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run comprehensive tests
      run: |
        echo "üß™ Running comprehensive test suite..."
        pnpm run lint
        npx tsc --noEmit
        pnpm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Check staging health
      run: |
        echo "üîç Verifying staging is healthy before production deploy..."
        if curl -f "${{ secrets.STAGING_URL }}/api/health"; then
          echo "‚úÖ Staging is healthy"
        else
          echo "‚ùå Staging is unhealthy - cannot deploy to production"
          exit 1
        fi

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [pre-deployment-checks]
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Link to production project
      run: |
        echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | supabase auth login --token
        supabase link --project-ref ${{ env.PRODUCTION_PROJECT_REF }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    
    - name: Check migration status
      run: |
        echo "üîç Checking production migration status..."
        supabase migration list --linked
        
        # Check if there are pending migrations
        if supabase migration list --linked | grep -q "‚îÇ.*‚îÇ.*‚îÇ"; then
          echo "üìù Migrations to apply found"
        else
          echo "‚úÖ No pending migrations"
        fi
    
    - name: Apply migrations to production
      run: |
        echo "üó∫Ô∏è Applying migrations to production..."
        echo "‚ö†Ô∏è This will modify production database"
        supabase db push --linked
    
    - name: Deploy to Vercel production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod --env NEXT_PUBLIC_SUPABASE_URL=${{ secrets.PRODUCTION_SUPABASE_URL }} --env NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }} --env ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} --env OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} --env NODE_ENV=production'
    
    - name: Production health check
      run: |
        echo "üîç Waiting for production deployment..."
        sleep 30
        
        # Extended health checks for production
        PRODUCTION_URL="https://mano.app"  # Replace with your actual domain
        
        echo "Checking basic health..."
        if curl -f "$PRODUCTION_URL/api/health"; then
          echo "‚úÖ Basic health check passed"
        else
          echo "‚ùå Basic health check failed"
          exit 1
        fi
        
        echo "Checking database connectivity..."
        # Add specific database health checks here
        
        echo "‚úÖ Production deployment successful"
    
    - name: Post-deployment monitoring
      run: |
        echo "üìä Setting up post-deployment monitoring..."
        # Add monitoring setup here
        echo "‚úÖ Monitoring active"
    
    - name: Notify team
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? '‚úÖ Success' : '‚ùå Failed';
          const emoji = '${{ job.status }}' === 'success' ? 'üöÄ' : 'üö®';
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `${emoji} **Production Deployment ${status}**
            
            **Commit**: ${context.sha.substring(0, 7)}
            **Deployer**: @${{ github.actor }}
            **Time**: ${new Date().toISOString()}
            
            ${status === '‚úÖ Success' ? 
              'üéâ Production is live with latest changes!' : 
              '‚ö†Ô∏è Deployment failed - check logs and consider rollback'}
            
            **Monitor**: https://mano.app/api/health`
          })