name: Pull Request Checks

on:
  pull_request:
    branches: [ staging, main ]
    types: [opened, synchronize, reopened]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: |
        echo "üîç Running ESLint..."
        npm run lint
    
    - name: Run TypeScript checks
      run: |
        echo "üîç Running TypeScript checks..."
        npx tsc --noEmit
    
    - name: Check for console.log statements
      run: |
        echo "üîç Checking for console.log statements..."
        if grep -r "console\.log" app/ components/ lib/ --exclude-dir=node_modules; then
          echo "‚ùå Found console.log statements - please remove or replace with proper logging"
          exit 1
        fi
        echo "‚úÖ No console.log statements found"
    
    - name: Check for TODO comments
      run: |
        echo "üîç Checking for TODO comments..."
        if grep -r "TODO\|FIXME\|HACK" app/ components/ lib/ --exclude-dir=node_modules; then
          echo "‚ö†Ô∏è Found TODO/FIXME/HACK comments - consider addressing before merge"
        else
          echo "‚úÖ No TODO comments found"
        fi

  security-checks:
    runs-on: ubuntu-latest
    name: Security Checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level moderate
    
    - name: Check for hardcoded secrets
      run: |
        echo "üîç Checking for hardcoded secrets..."
        
        # Check for common secret patterns
        if grep -r "sk-[a-zA-Z0-9]" app/ components/ lib/ --exclude-dir=node_modules | grep -v ".env"; then
          echo "‚ùå Potential hardcoded API keys found"
          exit 1
        fi
        
        if grep -r "password.*=" app/ components/ lib/ --exclude-dir=node_modules | grep -v "placeholder\|example"; then
          echo "‚ùå Potential hardcoded passwords found"
          exit 1
        fi
        
        echo "‚úÖ No hardcoded secrets detected"
    
    - name: Check environment variable usage
      run: |
        echo "üîç Checking environment variable patterns..."
        
        # Ensure NEXT_PUBLIC_ prefix for client-side env vars
        if grep -r "process\.env\." app/ components/ | grep -v "NEXT_PUBLIC_" | grep -v "server\|api"; then
          echo "‚ö†Ô∏è Non-NEXT_PUBLIC environment variables found in client code"
        fi
        
        echo "‚úÖ Environment variable usage looks good"

  migration-safety:
    runs-on: ubuntu-latest
    name: Migration Safety Checks
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for new migrations
      run: |
        echo "üó∫Ô∏è Checking for new migrations..."
        
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...HEAD)
        
        # Check if any migrations were added/modified
        MIGRATION_CHANGES=$(echo "$CHANGED_FILES" | grep "supabase/migrations/" || true)
        
        if [[ -n "$MIGRATION_CHANGES" ]]; then
          echo "üìù Migration changes detected:"
          echo "$MIGRATION_CHANGES"
          
          # Check for dangerous operations
          echo "üîç Checking for dangerous operations..."
          for migration in $MIGRATION_CHANGES; do
            if [[ -f "$migration" ]]; then
              if grep -i "drop table\|drop column\|drop index" "$migration"; then
                echo "‚ùå Dangerous operation found in $migration"
                echo "Please ensure this is safe and has proper rollback plan"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ Migration safety checks passed"
        else
          echo "‚úÖ No migration changes in this PR"
        fi
    
    - name: Validate migration naming
      run: |
        echo "üîç Validating migration file naming..."
        
        # Check that migration files follow proper naming convention
        for migration in supabase/migrations/*.sql; do
          if [[ ! "$(basename $migration)" =~ ^[0-9]{14}_[a-z_]+\.sql$ ]]; then
            echo "‚ùå Invalid migration name: $(basename $migration)"
            echo "Should follow format: YYYYMMDDHHMMSS_description.sql"
            exit 1
          fi
        done
        
        echo "‚úÖ Migration naming is correct"

  build-test:
    runs-on: ubuntu-latest
    name: Build Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test build with staging config
      run: |
        echo "üèóÔ∏è Testing build with staging configuration..."
        npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NODE_ENV: staging
    
    - name: Check bundle size
      run: |
        echo "üì¶ Analyzing bundle size..."
        # Add bundle size analysis here if needed
        echo "‚úÖ Bundle size check complete"

  pr-summary:
    runs-on: ubuntu-latest
    name: PR Summary
    needs: [code-quality, security-checks, migration-safety, build-test]
    if: always()
    
    steps:
    - name: Generate PR summary
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'Code Quality': '${{ needs.code-quality.result }}',
            'Security Checks': '${{ needs.security-checks.result }}',
            'Migration Safety': '${{ needs.migration-safety.result }}',
            'Build Test': '${{ needs.build-test.result }}'
          };
          
          const getEmoji = (status) => {
            switch(status) {
              case 'success': return '‚úÖ';
              case 'failure': return '‚ùå';
              case 'cancelled': return '‚ö†Ô∏è';
              case 'skipped': return '‚è≠Ô∏è';
              default: return '‚ùì';
            }
          };
          
          const allPassed = Object.values(results).every(r => r === 'success');
          const summary = Object.entries(results)
            .map(([name, status]) => `${getEmoji(status)} **${name}**: ${status}`)
            .join('\n');
          
          const body = `## üîç Pull Request Checks
          
          ${summary}
          
          ${allPassed ? 
            'üéâ **All checks passed!** This PR is ready for review.' : 
            '‚ö†Ô∏è **Some checks failed.** Please address the issues above.'}
          
          ---
          *Automated checks ensure code quality and deployment safety*`;
          
          // Find existing comment and update it, or create new one
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(
            comment => comment.body.includes('## üîç Pull Request Checks')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }